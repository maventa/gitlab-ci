# Auto DevOps
# Almost like https://raw.githubusercontent.com/gitlabhq/gitlabhq/master/vendor/gitlab-ci-yml/Auto-DevOps.gitlab-ci.yml but only the parts we want

variables:
  POSTGRES_USER: user
  POSTGRES_PASSWORD: testing-password
  POSTGRES_ENABLED: "true"
  POSTGRES_DB: $CI_ENVIRONMENT_SLUG

# rubycritic
code_quality:
  extends: .cache
  stage: analysis
  image: ruby:2.5.1
  allow_failure: true
  script:
    - export GEM_HOME=.cache/
    - gem install rubycritic
    - .cache/bin/rubycritic --no-browser
  artifacts:
    expire_in: 1 month
    paths: [tmp/rubycritic/*]
  only:
    - branches
  except:
    variables:
      - $CODE_QUALITY_DISABLED

# brakeman/find-sec-bugs/NodeJsScan
sast:
  stage: analysis
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - setup_docker
    - sast
  artifacts:
    expire_in: 1 month
    paths: [gl-sast-report.json]
  only:
    - branches
  except:
    variables:
      - $SAST_DISABLED

dast:
  stage: analysis
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - setup_configs
    - docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASSWORD
    - docker run -d -p $DAST_ON_PORT:$DAST_ON_PORT -v $CI_PROJECT_DIR/config:/app/config $DOCKERHUB_GROUPNAME/$CI_PROJECT_NAME:$CI_BUILD_REF_NAME
    - docker run -u zap -p 8080:8080 -i owasp/zap2docker-stable zap.sh -daemon -host http://docker -port $DAST_ON_PORT -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
  artifacts:
    paths: [gl-dast-report.json]
  only:
    refs:
      - branches
    variables:
      - $DAST_ON_PORT
  except:
    refs:
      - master
    variables:
      - $DAST_DISABLED

# bundler-audit
dependency_scanning:
  extends: .cache
  stage: analysis
  image: ruby:2.5.1
  allow_failure: true
  script:
    - export GEM_HOME=.cache/
    - gem install bundler bundler-audit
    - .cache/bin/bundler-audit check --update | tee bundler_audit.txt || true
    - .cache/bin/bundler outdated --parseable | tee bundler_outdated.txt || true
  artifacts:
    expire_in: 1 month
    paths:
      - bundler_audit.txt
      - bundler_outdated.txt
  only:
    - branches
  except:
    variables:
      - $DEPENDENCY_SCANNING_DISABLED

# clair
container_scanning: &container_scanning
  stage: analysis
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - setup_docker
    - container_scanning
  artifacts:
    expire_in: 1 month
    paths: [gl-container-scanning-report.json]
  only:
    - stage
    - prod
  except:
    variables:
      - $CONTAINER_SCANNING_DISABLED

manual_container_scanning:
  <<: *container_scanning
  only:
    - branches
  except:
    - master
    - dev
  when: manual


# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  auto_database_url=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${CI_ENVIRONMENT_SLUG}-postgres:5432/${POSTGRES_DB}
  export DATABASE_URL=${DATABASE_URL-$auto_database_url}
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')

  function sast() {
    docker run --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}" \
               --volume "$PWD:/code" \
               --volume /var/run/docker.sock:/var/run/docker.sock \
               "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  }

  function setup_configs() {
    echo 'Using config/*.yml.example to prepare config/*.yml...'
    for file in `ls config/*.yml.example`; do
      cp $file ${file%%.*}.yml
    done
  }

  function container_scanning() {
    docker run -d --name db arminc/clair-db:latest
    docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    apk add -U wget ca-certificates

    docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASSWORD
    docker pull $DOCKERHUB_GROUPNAME/$CI_PROJECT_NAME:$CI_BUILD_REF_NAME

    wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    mv clair-scanner_linux_amd64 clair-scanner
    chmod +x clair-scanner
    touch clair-whitelist.yml
    retries=0
    echo "Waiting for clair daemon to start"
    while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml $DOCKERHUB_GROUPNAME/$CI_PROJECT_NAME:$CI_BUILD_REF_NAME || true
  }


  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }


before_script:
  - *auto_devops
